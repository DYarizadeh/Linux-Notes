Linux logs are in syslog format and are in the timestamp based on the local time. Eavluate local time at (Debian/Redhat) /etc/localtime or /etc/timezone 

Secure File - file that logs security incidents. 
/var/log/auth.log 
/var/log/secure (for CentOS/RH) - File tracks new user creation, new group creation, logging in from remote system, changing of a user's password
/var/log/audit/audit.log -Verbose Logging (file creations, process spawning, ect... not on by default in Ubuntu. Check for calls to modify timestamps)
---Can use ausearch and aureport to interact with audit.log 

Use last -F -f ./utmp|wtmp|btmp to point it at a mounted image (last by default reads local system file)
Use wtmpdump for more verberose output
/var/run/utmp - Users/sessions currently logged in 
/var/log/wtmp - historical utmp data
/var/log/btmp - failed login events 
/var/log/lastlog - last login for each user (must use on live system)

Application Logs
Access.log file - keeps track of web server connections (e.g. Apache) 
/var/log/apache2/access_log
Tracks IP address, user agent, Date/Time Stamps
/var/log/nginx
/var/log/httpd
/var/log/mail
/var/log/mysqld.log
/var/log/mysql.log
/var/log/mariadb/*

Various locations for logs and artifacts 
/etc/hosts
/etc/passwd
/var/log/daemon.log
/var/log/messages
/var/log/secure
/var/spool/mail/

.bash_history - tracks commands typed in bash
/home/user/.bash_history

Linux OS system logs (equvilent to combining system and security logs) - Try grepping for root or CMD (or su on CentOS), or grep -v to exclude/filter out noisey events
(CentOS/RHEL) /var/log/messages*
(Ubuntu) /var/log/syslog 
 

Depreciated systemd - if exists,systemd can boot executable script. Existance not enough to prove execution. Evidence is in syslog (see grep)
/etc/rc.local
cat /var/log/syslog | egrep "rc-local.service|/etc/rc.local Compatibility"

/etc/init.d - traditional init for linux. Depreciated version of systemd. Can point to malicious executable script. Also check for recently modified files. 
/etc/init.d/*
/etc/init/*
/etc/rc.d/*
 
Scheduled tasks -
/etc/crontab
/etc/cron.d/*
/etc/cron.{hourly,daily,weekly,monthly}/*
/var/spool/cron/crontab/*
/etc/cron.allow /etc/cron.deny

Systemd (services; also check for *.timer) -
/etc/systemd/system/*.service
/usr/local/lib/systemd/system/*.service
/lib/systemd/system/*.service
/usr/lib/systemd/system/*.service

There are two lines we want to focus on:
ExecStart: This is the command that is run when the service starts
WantedBy: Having a value of multi-user.target means that the service should start on boot time.

Suspicious indicator for services (errors and output in services wont be logged in syslog) 
StandardOutput=null
StandardError=null

Locations for user defined services (also check for *.timer)
/home/user/.config/systemd/user/*.service
/etc/systemd/user/*.service
/home/user/.local/share/systemd/user/*.service
/usr/local/share/systemd/user/*.service
/usr/share/systemd/user/*.service
/usr/local/lib/systemd/user/*.service
/usr/lib/systemd/user/*.service

Systemd-generators (small binaries that will execute earliest at bootup and at configuration reload time (before unit files and other services are loaded))
Look for modification and creation time of systemd generators 
/etc/systemd/system-generators/*
/usr/local/lib/systemd/system-generators/*
/lib/systemd/system-generators/*
/etc/systemd/user-generators/*
/usr/local/lib/systemd/user-generators/*
/usr/lib/systemd/user-generators/*


Authorized SSH Keys - 
The authorized_keys file can be placed in the <home>/.ssh/authorized_keys directory of each user in the machine.

Is SSH enabled?
/etc/ssh/sshd_config

Check to see if a shell is configured on accounts that shouldn't have a shell
/etc/passwd
(no shell) www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
(yes shell) www-data:x:33:33:www-data:/var/www:/bin/bash

Account Creation/Manipulation - Check modify time of: 
/etc/passwd, /etc/shadow, /etc/gshadow and /etc/group

Message of the day (script initiated as root when someone logs in via ssh) - 
/etc/update-motd.d/*

Shell scripts (config scripts executed on shell startup (e.g. ssh), can be modified) - 
/etc/profile.d/*
/etc/profile
/etc/bash.bashrc
/etc/bash.bash_logout
/etc/*.bashrc
~/.bash_profile
~/.bash_login
~/.profile
`/.bash_logout

Live forensics - 

See open sockets and their processes -
# only listening sockets 
$ ss - l 

# all sockets and their processes -
$ ss -a 

Logs in /var/run are actually symbolic link to /run and stores volatil data. 


See processes and their parent-child relationship - 
(process can have PPID of 1 when parent process ends without waiting for child to finish)
$ ps -auxwf

Search for scripts (PPID of 1 could indicated parent script/process ended before the script ended)
$ ps -efj | egrep "python|bash|\bsh\b"

rc.local 
Check the status of the rc-local.service and see if it is not incative
$  systemctl status rc-local

inti.d 
Check the status of the rc-local.service and see if it is not incative
ls /var/run/systemd/generator.late/ #check for .service file existance
$ systemctl status evil-init-d

List services 
systemctl list-unit-files | grep generated -.mount


----------------------

Common attacks:
Brute force or exploit of public facing servers and applications. Attackers initial accss will be in the context of the application being exploited or the account that was authenitcated. 

Creating new accounts and adding the accounts to different groups (requires admin privileges) 

SSH Keys - attackers can create their own SSH keys and add to authorized_keys file. If system is configured to allow key based auth, this allowed them to regain access. 

Modifying the /etc/sudo file lets attackers give privileges to normal users. The /etc/sudoers.d/ folder allows changes to surivive system updates. 

Look for: 

Modified user accounts - the attacker needs to get access and run applications, which means users accounts and login data might keep evidence 
Strange entries in shell histroy - attacker is likely to start with shell access
Text editor history files - if they compile exploits or shell scripts to avoid shell history, you can find evidence in the text editor history 
Strange networking - attackers need to communicate with target system 
Common persistance - attackers need to get back in after reboot 
Altered files - as attackers move through system, things will be changed. This ranged from modifying existing files to implanting backdoors, to staging for exfil. 
Suspicious log data 

Common quick wins: 
Check the secure log(s) for sudo use and commands issued 
Check for user authentication (secure, auth.log or audit.log)
Check the messages log for unusual notifications or warnings 
Check the audit logs for commands issued 


Other places to look for attacker residue 
.bash_history 
.lesshst
.viminfo
.mysql_history
.python_history iiiiiiiiiiiiii
.gdb_history
.wget-hsts
.local/share/nano/search_history
/var/log/maillog - captures messages sent using sendmail 
/var/log/mail.log - postfix 
/var/log/firewalld - log data from system firewall 
/var/log/syslog - search for IPTables data 
/usr/local/samba/var/smbd.log and /usr/local/samba/var/nmbd.log - captures data from samba daemon. Useful when the system is in a mixed Windows/Linux enviornment 
/var/log/samba/{smbd,nmbd}.log - Samba on ubuntu 

Network activity - use lsof -Pni to display files associated with open sockets - look for unusually processes/files making network connections. Use netstat -nap to display all network connections

/etc/hosts - containds local IP resolution data
/etc/resolv.conf and /etc/system/resolved.conf - this contains DNS resolution configurations. Make sure nameserver settings are valid. 

Processes - ps -auxw is a good starting point to list processes. Check start times that seem out of sequence (e.g. servers spawning after boot), validate user accounts are correct, check command line arguments for the process. 

Files in /proc contain a wealth of information on running processes and can be an alternative to a full memory dump 

Niche notes on SSH - if the attacke ris able to create a config file in the ~/.ssh folder or /etc/ssh/ssh-config, they can enable different authentication or tirgger RCE with a legit user logs in (e.g. using the ProxyCommand /home/user/evilscript.sh - as part of a config file. 

In the SSH folder, check that authorized_keys and/or public/private keys have not been modified. 
Validate SSH configuration files 


---------------------------------------

Handy live forensics script - 
https://github.com/jgasmussen/Linux-Baseline-and-Forensic-Triage-Tool/blob/main/LBFTT.sh

Handy dead forensic script -
https://github.com/TazWake/Public/blob/master/Bash/triage_template.sh

Mounting a Linux LVM - 
https://www.cyberciti.biz/faq/linux-mount-an-lvm-volume-partition-command/
Sometimes if this doesn't work, use DiskInternals Linux Reader to convert the individual partition root partition from the .vmdk to .raw, then use quem-utils to convert the .raw to .vmdk and then use lvm to mount the .vmdk
